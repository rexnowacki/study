
// Card class
class Card {
public:
    enum class Face {
        TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN,
        JACK, QUEEN, KING, ACE, MAX_FACES
    };
    enum class Suit {
        HEARTS, DIAMONDS, CLUBS, SPADES, MAX_SUITS
    };

private:
    Face face;
    Suit suit;
    static const std::array<std::string, static_cast<size_t>(Face::MAX_FACES)> faceStrings;
    static const std::array<std::string, static_cast<size_t>(Suit::MAX_SUITS)> suitStrings;

public:
    Card() : face(Face::TWO), suit(Suit::HEARTS) {} // Default constructor
    Card(Face f, Suit s) : face(f), suit(s) {}

    std::string toString() const {
        return faceStrings[static_cast<size_t>(face)] + " of " + suitStrings[static_cast<size_t>(suit)];
    }
};

// Static arrays initialization for Card class
const std::array<std::string, static_cast<size_t>(Card::Face::MAX_FACES)> Card::faceStrings {
    "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten",
    "Jack", "Queen", "King", "Ace"
};
const std::array<std::string, static_cast<size_t>(Card::Suit::MAX_SUITS)> Card::suitStrings {
    "Hearts", "Diamonds", "Clubs", "Spades"
};
